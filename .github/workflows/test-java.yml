name: CI Tests

on:
  pull_request:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest

    environment: tests

    services:
      mysql:
        image: mysql:8.0
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    env:
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_URL: ${{ secrets.DB_URL }}
      DB_DDL: ${{ secrets.DB_DDL }}
      DB_INIT: ${{ secrets.DB_INIT }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      STORAGE_LOCATION_DIRECTORY: ${{ secrets.STORAGE_LOCATION_DIRECTORY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y

      - name: Build and start Docker containers with docker-compose.test.yml
        run: docker-compose -f docker-compose.test.yml up --build -d

      - name: Get MySQL logs
        run: docker logs mysql_db

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..10}; do
            if docker exec mysql_db mysqladmin ping -h"localhost" --silent; then
              echo "MySQL is up!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Run Tests
        run: docker exec spring_app ./mvnw test

      - name: Stop Docker containers
        run: docker-compose -f docker-compose.test.yml down -v